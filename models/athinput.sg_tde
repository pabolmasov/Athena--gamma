<comment>
problem   = poisson's solver test
reference = 
configure = --prob=sg_tde --grav=mg -hdf5 -h5double --hdf5_path /opt/homebrew
# --coord=spherical_polar

<job>
problem_id = pois    # problem ID: basename of output filenames

<output1>
file_type  = hdf5       # Binary data dump
variable   = prim       # variables to be output
dt         = 20.       # time increment between outputs

<output2>
file_type  = rst
dt         = 200.

<time>
cfl_number = 0.3        # The Courant, Friedrichs, & Lewy (CFL) Number
nlim       = -1          # cycle limit
tlim       = 10000.0        # time limit
integrator  = vl2       # time integration algorithm
xorder      = 2         # order of spatial reconstruction
ncycle_out  = 1         # interval for stdout summary info

<mesh>
nx1         = 256       # Number of zones in X1-direction
x1min       = -300.0      # minimum value of X1
x1max       = 300.0       # maximum value of X1
ix1_bc      = outflow      # Inner-X1 boundary condition flag
ox1_bc      = outflow      # Outer-X1 boundary condition flag
# x1rat       = 1.07461   # non-uniform grid ratio log-scale not supported (

nx2         = 256       # Number of zones in X2-direction
x2min       = -300.    # minimum value of X2
x2max       = 300.    # maximum value of X2
ix2_bc      = outflow      # Inner-X2 boundary condition flag
ox2_bc      = outflow      # Outer-X2 boundary condition flag

nx3         = 128           # Number of zones in X3-direction
x3min       = -150.            # minimum value of X3
x3max       = 150.  # maximum value of X3
ix3_bc      = outflow       # Inner-X3 boundary condition flag
ox3_bc      = outflow       # Outer-X3 boundary condition flag

refinement     = none
numlevel       = 4
derefine_count    = 3

<meshblock>
nx1        = 128
nx2        = 128
nx3        = 128

<hydro>
gamma           = 1.666666666667 # gamma = C_p/C_v
dfloor          = 1e-16
pfloor          = 1e-16
#  iso_sound_speed = 0.4082482905   # equivalent to sqrt(gamma*p/d) for p=0.1, d=1
# grav_acc2 = 0.1

<gravity>
mgmode          = FMG
threshold       = 0.0
# niteration      = 10
output_defect   = true
ix1_bc          = multipole
ox1_bc          = multipole
ix2_bc          = multipole
ox2_bc          = multipole
ix3_bc          = multipole
ox3_bc          = multipole
mporder = 4

<problem>
four_pi_G       = 12.5663706144
rzero = 200.
rper = 50.
rcore = 0.1
mstar = 1e-6 # in BH mass units
bgdrho = 1e-14
temp = 0.1
#  overkepler = 0.5 # 1.4142135623730951 overkepler is derived now as sqrt(2. * rper/rp)
